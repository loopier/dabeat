#+title: dabeat

* estructura
- A A B
- A = 3+1 || 6+2
- B = 3+1 || 6+2

* loop bd, sn, hh

- delays determinats a l'INIT
- delay per track + delay global
- probabilitats en alguns beats: `one_in(x)`

* samples
- chop(n) UN SOL SAMPLE
- rate: beat_stretch proporcional a la durada del sample
- ratio: rate transposat a tò (nota de l'escala)
- cutoff: separació entre sample agut i greu
- choose 2 seqüències de slices:
  1. slices per agut:
     - beat_stretch = (rate + ratio) * 2
     - HPF(cutoff)

  2. slices per greu
     - rate + ratio
     - LPF(cutoff + (a|b):
       a. si acompanya a agut: cutoff = cutoff(agut)
       b. si només sona el greu: cutoff + un extra per ocupar més espectre agut


* meta code

1. load a sample
2. chop twice in N chunks, determined with 's1': one for high-pitch, one for low-pitch
3. choose chunks favouring those that are closer to each other
4. use step #3 to create structure: A=3+1||6+2, B=3+1||6+2
   setp #3 must be used 4 times: 2 times for A (3+1), 2 times for B (3+1) so we
   end up with 4 different sets of chunks
5. create sequence [A,A,B]
